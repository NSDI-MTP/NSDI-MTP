event SEND : INCOMING::APP_EVENT {
    uint32 data_size;
}

event ACK : INCOMING::NET_EVENT {
    uint32 ack_seq;
    uint32 rwnd_size;
}

event DATA : INCOMING::NET_EVENT {
    uint32 data_len;
    uint32 seq_num;
}

event MISS_ACK : TIMER_EVENT {
    uint32 seq_num;
}

event FB_EVENT : OUTGOING::APP_EVENT {
    uint32 seq_num;
    uint32 data_len;
}

event PKT_EVENT : OUTGOING::NET_EVENT {
    uint32 seq_num;
    uint32 data_len;
    bool ack_flag;
    uint32 ack_num;
    uint32 wnd_size;
}

interm_output interm_out {
    bool change_cwnd;
    bool skip_ack_eps;
}

header IPheader {
    bool ecn;
    bit<16> identification;
    bit<3> flags;
    bit<8> ttl;
    bit<8> protocol;
    bit<16> hdrChecksum;
    uint16 tot_len;
    addr_t src_addr;
    addr_t dst_addr;
}

header TCPheader {
    bit<16> src_port;
    bit<16> dest_port;
    uint32 seq;
    uint32 ack_seq;
    bit<16> ack;
    bit<16> window;
}

struct sent_pkt_info {
    uint32 seq_num;
    uint32 data_len;
}

context tcp_context {
    uint32 last_ack = 429496729;
    uint8 duplicate_acks = 0;
    uint32 flightsize_dupl = 0;
    uint32 ssthresh = 99999999;
    uint32 cwnd_size = 3 * SMSS;

    uint32 RTO = ONE_SEC;
    int64 SRTT = 0;
    uint32 RTTVAR = 0;
    bool first_rto = 1;

    uint32 send_una = 0;
    uint32 send_next = 0;
    uint32 data_end = 0;
    uint32 last_rwnd_size = 16959;

    uint32 rwnd_size = 16959;
    uint32 recv_next = 0;
    list<sent_pkt_info> data_recv_info_array(500);
    uint32 data_recv_array_head = 0;
    uint32 data_recv_array_tail = 0;

    timer_t ack_timeout;

    addr_t read_from_addr;
    addr_t write_to_addr;
}

list<event_t> send_ep (SEND ev, tcp_context ctx, interm_out int_out) {
    list<event_t> events;

    uint32 SMSS = 1440;

    ctx.data_end = ctx.data_end + ev.data_size;

    uint32 data_rest = ctx.data_end - ctx.send_next;
    uint32 effective_window = ctx.cwnd_size;
    if(effective_window > ctx.last_rwnd_size)
        effective_window = ctx.last_rwnd_size;

    uint32 bytes_to_send = 0;

    if(ctx.send_una + effective_window < ctx.send_next)
        return;
    else {
        uint32 window_avail = ctx.send_una + effective_window - ctx.send_next;
        if(data_rest < window_avail)
            bytes_to_send = data_rest;
        else
            bytes_to_send = window_avail;
    }

    uint32 num_loops = bytes_to_send / SMSS;
    if(bytes_to_send % SMSS != 0)
        num_loops = num_loops + 1;
    
    for(uint32 i = 0; i < num_loops; i = i + 1) {
        uint32 pkt_data_len;
        if(bytes_to_send <= SMSS) {
            pkt_data_len = bytes_to_send;
            bytes_to_send = 0;
        } else {
            pkt_data_len = SMSS;
            bytes_to_send = bytes_to_send - SMSS;
        }
        PKT_EVENT pkt_ev;
        pkt_ev.seq_num = ctx.send_next;
        pkt_ev.data_len = pkt_data_len;
        pkt_ev.ack_flag = 0;
        pkt_ev.ack_num = ctx.recv_next;
        pkt_ev.wnd_size = ctx.rwnd_size;
        events.add(pkt_ev);

        ctx.send_next = ctx.send_next + pkt_data_len;
    }

    MISS_ACK time_ev;
    time_ev.seq_num = ctx.send_una;
    ctx.ack_timeout.set_duration(nanosecond(ctx.RTO));
    ctx.ack_timeout.start(time_ev);

    return events;
}

void rto_ep (ACK ev, tcp_context ctx, interm_out int_out) {

    int_out.skip_ack_eps = 0;

    if(ev.ack_seq < ctx.send_una || ctx.send_next < ev.ack_seq) {
        int_out.skip_ack_eps = 1;
        return;
    }

    uint32 granularity_g = 1;
    uint32 RTT = 100000000;

    if(ctx.first_rto) {
        ctx.SRTT = RTT;
        ctx.RTTVAR = RTT / 2;
        if(granularity_g >= 4 * ctx.RTTVAR)
            ctx.RTO = ctx.SRTT + granularity_g;
        else
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        
        ctx.first_rto = false;
    } else {
        ctx.RTTVAR = (1 - 1/4) * ctx.RTTVAR + 1/4 * abs(ctx.SRTT - RTT);
        ctx.SRTT = (1 - 1/8) * ctx.SRTT + 1/8 * RTT;
        if(granularity_g >= 4 * ctx.RTTVAR)
            ctx.RTO = ctx.SRTT + granularity_g;
        else
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
    }
}

void fast_retr_rec_ep (ACK ev, tcp_context ctx, interm_out int_out) {

    if(int_out.skip_ack_eps)
        return;
    
    uint32 SMSS = 1440;

    int_out.change_cwnd = 1;

    if(ev.ack_seq == ctx.last_ack) {
        ctx.duplicate_acks = ctx.duplicate_acks + 1;

        int_out.change_cwnd = 0;

        if(ctx.duplicate_acks == 1) {
            ctx.flightsize_dupl = ctx.send_next - ctx.send_una;
        }

        if(ctx.duplicate_acks == 3) {

            uint32 opt1 = ctx.flightsize_dupl / 2;
            uint32 opt2 = 2 * SMSS;
            if(opt1 >= opt2)
                ctx.ssthresh = opt1;
            else
                ctx.ssthresh = opt2;

            ctx.cwnd_size = ctx.ssthresh + 1 * SMSS;
        }
        
        if(ctx.duplicate_acks != 3) {
            ctx.cwnd_size = ctx.cwnd_size + SMSS;
        }

    } else {
        if(ctx.duplicate_acks > 0) {
            ctx.cwnd_size = ctx.ssthresh;
        }

        ctx.duplicate_acks = 0;
        ctx.last_ack = ev.ack_seq;
    }
}

void slows_congc_ep (ACK ev, tcp_context ctx, interm_out int_out) {

    if(int_out.skip_ack_eps)
        return;

    uint32 SMSS = 1440;

    if(int_out.change_cwnd) {
        if(ctx.cwnd_size < ctx.ssthresh) {
            ctx.cwnd_size = ctx.cwnd_size + SMSS;
        }
        else {
            uint32 add_cwnd = SMSS * SMSS / ctx.cwnd_size;
            if(add_cwnd == 0)
                add_cwnd = 1;
            ctx.cwnd_size = ctx.cwnd_size + add_cwnd;
        }
    }
}

list<event_t> ack_net_ep (ACK ev, tcp_context ctx, interm_out int_out) {
    list<event_t> events;

    uint32 SMSS = 1440;

    if(int_out.skip_ack_eps)
        return events;

    ctx.last_rwnd_size = ev.rwnd_size;
    ctx.send_una = ev.ack_seq;

    uint32 data_rest = ctx.data_end - ctx.send_next;
    if(data_rest == 0 && ev.ack_seq == ctx.send_next) {
        ctx.ack_timeout.cancel();
        return events;
    }

    uint32 effective_window = ctx.cwnd_size;
    if(effective_window > ctx.last_rwnd_size)
        effective_window = ctx.last_rwnd_size;

    uint32 bytes_to_send = 0;

    if(ctx.duplicate_acks == 3) {
        bytes_to_send = SMSS;
        if(bytes_to_send > effective_window)
            bytes_to_send = effective_window;

        PKT_EVENT pkt_ev;
        pkt_ev.seq_num = ctx.send_una;
        pkt_ev.data_len = bytes_to_send;
        pkt_ev.ack_flag = 0;
        pkt_ev.ack_num = ctx.recv_next;
        pkt_ev.wnd_size = ctx.rwnd_size;
        events.add(pkt_ev);

        return events;
    }

    uint32 window_avail = ctx.send_una + effective_window - ctx.send_next;

    if(window_avail < 0)
        bytes_to_send = 0;
    else {
        if(data_rest < window_avail)
            bytes_to_send = data_rest;
        else
            bytes_to_send = window_avail;
    }

    uint32 num_loops = bytes_to_send / SMSS;
    if(bytes_to_send % SMSS != 0)
        num_loops = num_loops + 1;

    for(uint32 i = 0; i < num_loops; i = i + 1) {
        uint32 pkt_data_len;
        if(bytes_to_send <= SMSS) {
            pkt_data_len = bytes_to_send;
            bytes_to_send = 0;
        } else {
            pkt_data_len = SMSS;
            bytes_to_send = bytes_to_send - SMSS;
        }
        PKT_EVENT pkt_ev;
        pkt_ev.seq_num = ctx.send_next;
        pkt_ev.data_len = pkt_data_len;
        pkt_ev.ack_flag = 0;
        pkt_ev.ack_num = ctx.recv_next;
        pkt_ev.wnd_size = ctx.rwnd_size;
        events.add(pkt_ev);

        ctx.send_next = ctx.send_next + pkt_data_len;
    }

    ctx.ack_timeout.cancel();
    MISS_ACK time_ev;
    time_ev.seq_num = ctx.send_una;
    ctx.ack_timeout.set_duration(nanosecond(ctx.RTO));
    ctx.ack_timeout.start(time_ev);

    return events;
}

void data_net_ep (DATA ev, tcp_context ctx, interm_out int_out) {

    if((ctx.rwnd_size == 0 && ev.data_len > 0) ||
    (ev.seq_num > ctx.recv_next + ctx.rwnd_size) ||
    (ev.seq_num + ev.data_len - 1 < ctx.recv_next))
        return;
    
    uint32 MAX_NUM_CTX_PKT_INFO = 500;

    if(ev.seq_num <= ctx.recv_next && ev.seq_num + ev.data_len - 1 >= ctx.recv_next) {
        if(ev.seq_num + ev.data_len < ctx.recv_next + ctx.rwnd_size)
            ctx.recv_next = ev.seq_num + ev.data_len;
        else
            ctx.recv_next = ctx.recv_next + ctx.rwnd_size;
        
        if(ctx.data_recv_array_head != ctx.data_recv_array_tail) {
            uint32 curr_index;
            if(ctx.data_recv_array_tail == 0)
                curr_index = MAX_NUM_CTX_PKT_INFO - 1;
            else
                curr_index = ctx.data_recv_array_tail - 1;

            for(uint32 i = 0; i < MAX_NUM_CTX_PKT_INFO; i = i + 1) {
                if(ctx.data_recv_info_array[curr_index].seq_num <= ctx.recv_next) {
                    uint32 elem_recv_next = ctx.data_recv_info_array[curr_index].seq_num +
                        ctx.data_recv_info_array[curr_index].data_len;
                    
                    if(elem_recv_next > ctx.recv_next)
                        ctx.recv_next = elem_recv_next;
                    
                    if(ctx.data_recv_array_tail == 0)
                        ctx.data_recv_array_tail = MAX_NUM_CTX_PKT_INFO - 1;
                    else
                        ctx.data_recv_array_tail = ctx.data_recv_array_tail - 1;
                        
                } else
                    break;
                
                if(ctx.data_recv_array_head == ctx.data_recv_array_tail)
                    break;
                
                if(curr_index == 0)
                    curr_index = MAX_NUM_CTX_PKT_INFO - 1;
                else
                    curr_index = curr_index - 1;
            }
        }
    } else {
        if((ctx.data_recv_array_tail == MAX_NUM_CTX_PKT_INFO -1 && ctx.data_recv_array_head == 0) ||
        (ctx.data_recv_array_head == ctx.data_recv_array_tail + 1))
            return;
        
        uint32 curr_index = ctx.data_recv_array_head;
        sent_pkt_info new_elem;
        new_elem.seq_num = ev.seq_num;
        new_elem.data_len = ev.data_len;
        bool found = false;

        

        for(uint32 i = 0; i < MAX_NUM_CTX_PKT_INFO; i = i + 1) {
            if(found) {
                sent_pkt_info temp = ctx.data_recv_info_array[curr_index];
                ctx.data_recv_info_array[curr_index] = new_elem;
                new_elem = temp;
            }
            
            if(ctx.data_recv_info_array[curr_index].seq_num == new_elem.seq_num &&
            ctx.data_recv_info_array[curr_index].data_len == new_elem.data_len && found == false)
                break;

            if(ctx.data_recv_info_array[curr_index].seq_num <= new_elem.seq_num && found == false) {
                sent_pkt_info temp = ctx.data_recv_info_array[curr_index];
                ctx.data_recv_info_array[curr_index] = new_elem;
                new_elem = temp;
                found = true;
                ctx.data_recv_array_tail = (ctx.data_recv_array_tail + 1) % MAX_NUM_CTX_PKT_INFO;
            }

            if(curr_index == ctx.data_recv_array_tail)
                break;

            curr_index = (curr_index + 1) % MAX_NUM_CTX_PKT_INFO;
        }
    }
}

list<event_t> send_ack (DATA ev, tcp_context ctx, interm_out int_out) {
    list<event_t> events;

    uint32 SMSS = 1440;

    uint32 data_rest = ctx.data_end - ctx.send_next;
    uint32 effective_window = ctx.cwnd_size;
    if(effective_window > ctx.last_rwnd_size)
        effective_window = ctx.last_rwnd_size;

    uint32 window_avail = ctx.send_una + effective_window - ctx.send_next;
    uint32 bytes_to_send = 0;

    if(window_avail < 0)
        bytes_to_send = 0;
    else {
        if(data_rest < window_avail)
            bytes_to_send = data_rest;
        else
            bytes_to_send = window_avail;
        
        if(bytes_to_send > SMSS)
            bytes_to_send = SMSS;
    }

    PKT_EVENT pkt_ev;
    pkt_ev.seq_num = ctx.send_next;
    pkt_ev.data_len = bytes_to_send;
    pkt_ev.ack_flag = 1;
    pkt_ev.ack_num = ctx.recv_next;
    pkt_ev.wnd_size = ctx.rwnd_size;
    events.add(pkt_ev);

    return events;
}

list<event_t> app_feedback_ep (DATA ev, tcp_context ctx, interm_out int_out) {
    list<event_t> events;

    FB_EVENT fb_ev;
    fb_ev.seq_num = ev.seq_num;
    fb_ev.data_len = ev.data_len;
    events.add(fb_ev);

    return events;
}

list<event_t> ack_timeout_ep (MISS_ACK ev, tcp_context ctx, interm_out int_out) {
    list<event_t> events;

    uint32 SMSS = 1440;

    ctx.cwnd_size = SMSS * 3;
    uint32 opt1 = (ctx.send_next - ctx.send_una) / 2;
    uint32 opt2 = 2 * SMSS;
    if(opt1 > opt2)
        ctx.ssthresh = opt1;
    else
        ctx.ssthresh = opt2;
    
    uint32 data_rest = ctx.data_end - ctx.send_una;
    uint32 effective_window = ctx.cwnd_size;
    if(effective_window > ctx.last_rwnd_size)
        effective_window = ctx.last_rwnd_size;
    
    uint32 bytes_to_send = 0;

    if(ctx.send_una + effective_window < ctx.send_next) {
        if(data_rest < effective_window)
            bytes_to_send = data_rest;
        else
            bytes_to_send = effective_window;
    } else {
        uint32 window_avail = ctx.send_una + effective_window - ctx.send_next;
        if(data_rest < window_avail)
            bytes_to_send = data_rest;
        else
            bytes_to_send = window_avail;
    }
    if(bytes_to_send > SMSS)
        bytes_to_send = SMSS;
    
    PKT_EVENT pkt_ev;
    pkt_ev.seq_num = ctx.send_una;
    pkt_ev.data_len = bytes_to_send;
    pkt_ev.ack_flag = 0;
    pkt_ev.ack_num = ctx.recv_next;
    pkt_ev.wnd_size = ctx.rwnd_size;
    events.add(pkt_ev);

    ctx.ack_timeout.restart(nanosecond(ctx.RTO));
}

dispatch disp_table {
    SEND      -> {send_ep};
    ACK       -> {rto_ep, fast_retr_rec_ep, slows_congc_ep, ack_net_ep};
    DATA      -> {data_net_ep, send_ack, app_feedback_ep};
    MISS_ACK   -> {ack_timeout_ep};
}